 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
- La captura está compuesta por 954 paquetes.

 ** ¿Cuánto tiempo dura la captura?
- La captura dura 56.149545 segundos.

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
- La IP de la máquina donde se ha realizado la captura es 192.168.1.34. Se trata de una IP privada ya que se encuentra dentro del rango             192.168.0.0-192.168.255.255 dentro del bloque de 16 bits de las redes privadas IPv4.


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
- El porcentaje de paquetes en UDP es de 92.23% frente a un 2.10% en TCP, con lo que podemos ver claramente que UDP es mayor.
Esto sí es consistente con una aplicación que transmite en tiempo real ya que por ejemplo si transmitimos en Voz IP no nos interesa que haya una retransmisión de paquetes anteriores.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
- Además de los protocolos nombrados en la pregunta anterior, en Protocol Hierarchy podemos ver RTP, RTCP, HTP, ICMP, ARP, SIP, DNS y STUN.

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
- Los paquetes SIP se envían en los segundos 7.343770, 14.426793, 16.233522, 39.154151 y 55.694378.

 ** Y los paquetes con RTP, ¿cuándo se envían?
- Los paquetes RTP se envían en los segundos 18.002740, 21.830296, 23.273887, 25.042266, 29.043207, 33.327038 y 35.159692.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
- En estas tramas se está utilizando DNS.

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
- La dirección IP del servidor que ha lanzado Ekiga es 80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
- La dirección IP que devuelve el servicio de nombres es 86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
- Para obtener la resolución inversa aunque en este caso no la obtengamos.


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
- Se está pidiendo la URL: http://ekiga.net/ip/

 ** ¿Qué user agent (UA) la está pidiendo?
- El user agent es Ekiga.

 ** ¿Qué devuelve el servidor?
- El servidor devuelve la siguiente linea: 83.36.48.212, la cual es IP pública del cliente 192.168.1.34

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
- Recibimos la siguiente IP pública: 193.147.49.96. El servidor está respondiendo con la IP pública del cliente.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
- Se hace uso de este protocolo en esta captura ya que es utilizado principalmente por teléfonos o software Voz IP. 
Éste incorpora un cliente STUN que envía una petición a un servidor STUN. El servidor STUN informa entonces al cliente de la IP pública de este último y qué puerto ha sido abierto por NAT para permitir el tráfico entrante a la red del cliente. 

 ** ¿Estamos tras un NAT?
- Sí, ya que STUN es un protocolo de red del tipo cliente/servidor que a través de este mecanismo permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto local.


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
- El servidor Registrar tiene la dirección IP 86.64.162.35

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
- Se envían al puerto 5060

 ** ¿Qué método SIP utiliza el UA para registrarse?
- El método REGISTER

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
- El user agent entiende las siguientes instrucciones además de REGISTER: INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER y MESSAGE.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
- No se registra con éxito.

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
- Sabemos si el registro se realiza correctamente mirando el estado del mensaje de respuesta que se recibe. En el caso del primer intento nos encontramos con "Status: 401 Unauthorized (0 bindings)" por lo que no se ha registrado con éxito, sin embargo, en el segundo intento nos encontramos con "Status: 200 OK (1 bindings)" lo que nos indica que esta vez sí se ha registrado correctamente.

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
- En el primer intento el tamaño del paquete es de 523 bytes y en el segundo intento 714 bytes. Esto se debe a que el paquete del primer intento no contiene la cabecera "Authorization".

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
- Si miramos la cabecera Expires comprobamos que el tiempo de expiración es de 3600 segundos.


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
- Sí, estos datos están contenidos en el campo "Message Header", exactamente en "from".
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
- Contiene la información que sirve para describir la sesión de comunicación multimedia establecida. El protocolo utilizado es SDP.
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
- No, porque el usuario al que efectuamos la llamada nos responde con un error "407: Proxy Authentication Required" en vez de responder con un "200 OK"
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
- Se diferencia en que el segundo intento contiene el campo "Proxy-Authentication". Se debe a que el INVITE necesita esa información para poder realizarse correctamente, por eso en el primer intento el error es consecuencia de que no tenemos dicho campo. Se diferencia también en que el segundo INVITE contiene más bits en la trama que el primer INVITE ya que además de los datos que contenía este último se le ha añadido el campo "Proxy-Authentication".


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
- Se utiliza RTP para enviar audio y vídeo, en caso del segundo, se utiliza también el codec H.261 que forma parte de los estándares de codificación de vídeo del ITU-T Video Coding Experts Group (VCEG).
 ** ¿Cuál es el tamaño de paquete de los mismos?
- En el caso de RTP para audio el tamaño es 214 bytes (1712 bits) y en caso de vídeo el tamaño de paquete es variable.
 ** ¿Se utilizan bits de padding?
- No se utilizan: " ..0. .... = Padding: False".
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
- 160 ms.
 ** ¿Cuántos bits/segundo estamos enviando?
- 10700 bits/segundo.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
- Dos flujos, porque están dirigidos a dos puertos diferentes (5014 y 5010) uno para audio y otro para vídeo. 
 ** ¿Cuántos paquetes se pierden?
- No se pierde ningún paquete.
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
- Es el máximo retardo de los paquetes. El valor máximo del delta de los paquetes que van dirigidos al puerto 5014 es de 1290.48, de los que van dirigidos al puerto 5010 es 1290.40
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
- El valor máximo de jitter de los paquetes que van dirigidos al puerto 5014 es 183.10, de los paquetes dirigidos al puerto 5010 es 119.64. El valor mínimo de jitter de los paquetes que van dirigidos al puerto 5014 es 153.24, de los paquetes dirigidos al puerto 5010 es 42.50
-  No, ya que el jitter tiene mucha variación y esto hace que haya mucha diferencia de retardo y tengamos una conversación de baja calidad.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
- delta: 0 jitter: 0
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
- No, sabemos que es el primer paquete que nos llega porque tiene delta y jitter 0 pero no tenemos forma de saber si nos han enviado otro paquete antes y este se ha perdido.
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
- A partir del paquete 247 incluido hay paquetes con jitter mayor de 10 ms.
 ** ¿A qué se debe el cambio tan brusco del jitter?
- A que el delta se incrementa de manera considerable en ese paquete.
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
- 
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
- 

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
- 20.889 segundos.
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
-  


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
- Utiliza el método BYE.
 ** ¿En qué trama(s)?
- En las tramas 924, 925, 927 y 933.
 ** ¿Por qué crees que se envía varias veces?
- Porque no ha recibido el "200 OK".


16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
- Para poder poner el tiempo de expiración a 0 antes de cerrarse.
 ** ¿En qué trama sucede esto?
- En la trama 950.
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
- El REGISTER del principio de la sesión tenía un campo Expires de 3600 segundos, en este caso, tiene un Expires de 0 segundos.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
